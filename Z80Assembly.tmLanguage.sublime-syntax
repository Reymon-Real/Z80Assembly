%YAML 1.2

---
name: Z80 Family Assembly
uuid: EDE7FFE3-F4DD-4BE1-94D9-ED7F973D2237
file_extensions: [asm, ASM, s, S, inc, INC, z80, Z80, rasm]
scope: source.z80

variables:

  regs: '([A-IL|(BC)|(DE)|(HL)|(IX)|(IY)|(SP)])'
  
  address: '(?:&[HX][\da-fA-F]{4}|[$#&][\da-fA-F]{4}|\b0[Xa-fA-F][\da-fA-F]{4}H|\b[\d]{4}H|[\d]{4,5}D)\b'
  
  binary: '(?:%[01]+|[01]+[bB])'
  
  octal: '(?:&O[0-7]+|[0-7]+[OQ])'
  
  decimal: '(?:[0-9]+|[0-9]D)'
  
  hexidecimal: '(?:((0x|#|&|\$)[0-9a-fA-F]+)|\b([0-9a-fA-F]+[hH]))\b'

  number: '(?:{{binary}}|{{octal}}|{{hexidecimal}}|{{decimal}})'
  
  comment: '(?:;.+)'
  
  conditionals: '(?i)\b(?:NC|NZ|PE|PO|C|M|P|Z)\b'
  
  label: '\b[_a-zA-Z\.][_a-zA-Z0-9\.]*[_a-zA-Z0-9\.]\b'
  
  label_multi: '{{label}}(?:[~&^|+-]{{label}})*'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: strings
    - include: identifiers
    - include: directives
    - include: directives_data
    - include: opcodes
    - include: operators
    - include: registers
    - include: labels
    - include: addresses
    - include: numbers

  registers:
    - match: '(?i)\b(AF|BC|DE|HL)'''
      comment: '16-bit shadow registers (note: escaped single quote)'
      scope: variable.other.z80
    - match: '(?i)\b(AF|BC|DE|HL|PC|SP|IX|IY)\b'
      comment: '16-bit registers'
      scope: variable.other.z80
    - match: '(?i)\(\s?(AF|BC|DE|HL|SP|IX|IY|{{number}}|{{label}})(?:\s?[+-]?\s?{{number}})?\s?\)'
      comment: 'Pointer to 16-bit register/address (incl. offsets)'
      scope: variable.parameter.z80
    - match: '(?i)\b(HX|HY|LX|LY)\b'
      comment: 'Undocumented 8-bit registers'
      scope: variable.other.z80
    - match: '(?i)\b([ABCDEFHILR]|IXH|IXL|IYH|IYL|LX|LY|YL|YH)\b'
      comment: '8-bit registers'
      scope: variable.other.z80

  opcodes:
    
    - match: '(?i)\b(CALL|JP|JR|DJNZ)\s+({{conditionals}}), ?({{address}}|{{label}})\b'
      comment: 'Calls and jumps, with a condition'
      captures:
        1: keyword.control.z80
        2: keyword.control.conditional.z80
        3: variable.function.z80
    
    - match: '(?i)\b(CALL|JP|JR|DJNZ)\s+({{address}}|{{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.function.z80
    
    - match: '(?i)\b(JP)\s+(\((HL|IX|IY)\))'
      comment: 'Jumps using 16-bit registers'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80
    
    - match: '(?i)\b(RET)(\s+{{conditionals}})?\b'
      comment: 'RETurn, with an optional condition'
      captures:
        1: keyword.control.z80
        2: keyword.control.conditional.z80

    - match: '(?i)\b(RST)(\s)+(?:({{number}})|({{label}}))\b'
      captures:
        1: keyword.control.z80
        2: constant.numeric
        3: variable.function.z80

    - match: '(?i)\b(CP)\s*(?:({{number}})|({{label}})|({{regs}}))\b'
      captures:
        1: keyword.control.z80
        2: constant.numeric
        3: variable.function.z80

    - match: '(?i)\b(MLT|ADC|ADD|BIT|CCF|CP|CPL|CPD|CPDR|CPI|CPIR|DAA|DEC|DI|DJNZ|EI|EX|EXX|HALT|SLP|IM|IN|INC|IND|INDR|INF|INI|INIR|IN0|NEG|NOP|EXX|OR|OTDR|OTIR|OUT|OUTD|OUTI|OUT0|POP|PUSH|RES|RETI|RETN|RL|RLA|RLC|RLCA|RLD|RR|RRA|RRC|RRCA|RRD|SBC|SCF|SET|SLA|SLI|SLL|SRA|SRL|SUB)\b'
      scope: keyword.control.z80

    - match: '(?i)\b(LD|LDD|LDDR|LDI|LDIR)\b'
      scope: keyword.control.z80

  operators:
    
    - match: '(?i)\b(AND|DEFINED|EQ|GE|GT|HIGH|LE|LOW|LT|MOD|NE|NOT|NUL|OR|TST|SHL|SHR|XOR)\b'
      scope: keyword.control.z80
    
    - match: '\s(!=|##|&&|<<|<=|>>|>=|\|\||[&$%*+/=?~><|!-])\s'
      scope: keyword.control.z80

  identifiers:
    
    - match: '(?i)\b\s*(MACRO)\s+({{label}}(,{{label}})*)\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80
    
    - match: '(?i)\b\s*(DEFL)\s+({{label}}|{{number}}|({{label}}\s+({{number}}|{{label}})))\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80

    - match: '(?i)\b#?(DEFINE)\s+({{label}}|{{number}})\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.Z80

    - match: '(?i)(^|\s+)(DEFGROUP|IRP|REPT|ENDR|EXITM|ENDM|MEND|ENDIF)'
      scope: keyword.control.z80

  directives:
    
    - match: '(?i)(^|\s+)(INCBIN|INCLUDE|ALIGN)\s'
      scope: keyword.control.import.z80
    
    - match: '(?i)(^|\s+)(PUBLIC|LOCAL|EXTERN|SECTION|ORG|RUN|END|BUILDROM|BUILDCPR|BUILDSNA|BANKROM|BANKSET|BANK|SAVE)\s?'
      scope: keyword.control.z80
    
    - match: '(?i)(^|\s+)(PROC|ENDP)\s'
      scope: keyword.control.z80
    
    - match: '(?i)(^|\s+)\.(ERROR|SHIFT|WARNING)\s'
      scope: keyword.control.z80
    
    - match: '(?i)(^|\s+)(.org|.area|.globl)'
      scope: keyword.control.z80
    
    - match: '(?i)^\s*(IFNDEF|IFDEF|IF) +({{label}})\s+({{comment}})?$'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80
        3: comment.line.z80
    
    - match: '(?i)(^|\s+)(ELSE|ENDIF)\s'
      scope: keyword.control.z80
    
    - match: '(?i)^(.+?)\s+(EQU)\s+(.+?)(\s+{{comment}})?$'
      captures:
        1: variable.parameter.z80
        2: keyword.control.z80
        3: constant.numeric
        4: comment.line.z80

  directives_data:
    
    - match: '(?i)\b\s*(DEF[BWPS]|DB|DW|DP|DS)\s+({{label}}(,{{label}})*)\b'
      captures:
        1: storage.type.z80
        2: variable.parameter.z80
    
    - match: '(?i)\b(?:DEF[BWPS]|DB|DW|DP|DS)\b'
      scope: storage.type.z80

  addresses:
    
    - match: '{{address}}'
      scope: constant.other.address.z80

  numbers:
    
    - match: '{{binary}}'
      scope: constant.other.binary.z80
    
    - match: '{{octal}}'
      scope: constant.numeric.octal.z80
    
    - match: '{{hexidecimal}}'
      scope: constant.numeric.hex.z80
    
    - match: '{{decimal}}'
      scope: constant.numeric.integer.z80

  strings:
    
    - match: '"'
      comment: 'Strings begin/end with double quotes'
      scope: punctuation.definition.string.begin.z80
      push: inside_string
  
  inside_string:
    
    - meta_include_prototype: false
    
    - meta_scope: string.quoted.double.z80
    
    - match: '\\.'
      scope: constant.character.escape.z80
    
    - match: '"'
      scope: punctuation.definition.string.end.z80
      pop: true

  labels:
    
    - match: '^({{label}}):?'
      comment: 'Label definition'
      captures:
        1: entity.name.function.z80
    
    - match: '^ +({{label}}):'
      comment: 'Indented label definition'
      captures:
        1: entity.name.function.z80
    
    - match: '\({{label_multi}}\)'
      comment: 'Address of label'
      scope: variable.parameter.z80
    
    - match: ', ?({{label_multi}})\b'
      comment: 'Labels used in instructions'
      captures:
        1: variable.function.z80

  comments:
    
    - match: ';'
      comment: 'Comments begin with a ";" and finish at EOL'
      scope: punctuation.definition.comment.z80
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.z80
        - match: $\n?
          pop: true
    
    - match: '//'
      comment: 'Comments can also begin with a "//", and finish at EOL'
      scope: punctuation.definition.comment.z80
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.z80
        - match: $\n?
          pop: true
