%YAML 1.2

---
name: Z80/Z180 Assembly
uuid: EDE7FFE3-F4DD-4BE1-94D9-ED7F973D2237
file_extensions: [asm, ASM, s, S, inc, INC, z80, Z80]
scope: source.z80

variables:

  # Registers vars

  regs: '(A|B|C|D|E|H|L|AF|BC|DE|HL|IX|IY|SP)'
  
  regs8: '(A|B|C|D|E|H|L)'
  
  regs16: '(AF|BC|DE|HL|IX|IY|SP)'
  
  reg_ptr: '(\((HL|IX|IY)\))' 

  reg_ptr_hl: '(\(HL\))'

  # Numbers

  binary: '(?:%[01]+|[01]+[bB])'
  
  octal: '(?:&O[0-7]+|[0-7]+[OQ])'
  
  decimal: '(?:[0-9]+[dD]?)'
  
  hexidecimal: '(?:((0x|#|&|\$)[0-9a-fA-F]+)|([0-9a-fA-F]+[hH]))'

  number: '(?:{{decimal}}|{{binary}}|{{octal}}|{{hexidecimal}})'

  address: '(?:{{number}})'
  
  # Labels

  label: '\b[_a-zA-Z][_a-zA-Z0-9]*[_a-zA-Z0-9]\b'
  
  label_multi: '{{label}}(?:[~&^|+-]{{label}})*'

  # Flags

  conditionals: '(?i)\b(?:NC|NZ|PE|PO|C|M|P|Z)\b'

  # Other

  comma: '\s*,\s*'

  comment: '(?:;.+)'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: strings
    - include: identifiers
    - include: directives
    - include: directives_data
    - include: opcodes
    - include: operators
    - include: registers
    - include: labels
    - include: addresses
    - include: numbers

  registers:
    - match: '(?i)\b(AF|BC|DE|HL)'''
      scope: variable.other.z80
    
    - match: '(?i)\b{{regs16}}\b'
      scope: variable.other.z80
    
    - match: '(?i)\(\s?({{regs16}}|{{number}}|{{label}})(?:\s?[+-]?\s?{{number}})?\s?\)'
      scope: variable.parameter.z80
    
    - match: '(?i)\b(IXH|IHL|IYH|IYL)\b'
      scope: variable.other.z80
    
    - match: '(?i)\b([ABCDEFHILR]|IXH|IXL|IYH|IYL|LX|LY|YL|YH)\b'
      scope: variable.other.z80

  # ****************************************
  # *** Mnemonics or set of instructions ***
  # ****************************************

  opcodes:

    # Jumping, calling and unconditional cycles

    - match: '(?i)\b(JP|JR|CALL|DJNZ)\s+({{address}})\b'
      captures:
        1: keyword.control.z80
        2: constant.numeric.z80

    - match: '(?i)\b(JP|JR|CALL|DJNZ)\s+({{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.function.z80

    # Conditional jumps

    - match: '(?i)\b(JP|JR)\s+({{conditionals}}){{comma}}({{address}})\b'
      captures:
        1: keyword.control.z80
        2: keyword.control.conditional.z80
        3: constant.numeric.z80

    - match: '(?i)\b(JP|JR)\s+({{conditionals}}){{comma}}({{label}})\b'
      captures:
        1: keyword.control.z80
        2: keyword.control.conditional.z80
        3: variable.function.z80

    # Conditional calls

    - match: '(?i)\b(CALL)\s+({{conditionals}}){{comma}}({{label}})\b'
      captures:
        1: keyword.control.z80
        2: keyword.control.conditional.z80
        3: variable.function.z80

    - match: '(?i)\b(CALL)\s+({{conditionals}}){{comma}}({{address}})\b'
      captures:
        1: keyword.control.z80
        2: keyword.control.conditional.z80
        3: constant.numeric.z80
    
    # Jumps with pointers
    
    - match: '(?i)\b(JP)\s+({{reg_ptr}})'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80
    
    # Return and conditional return

    - match: '(?i)\b(RET)(\s+{{conditionals}})*\b'
      captures:
        1: keyword.control.z80
        2: keyword.control.conditional.z80

    # Reset instruction

    - match: '(?i)\b(RST)\s+({{number}})\b'
      captures:
        1: keyword.control.z80
        2: constant.numeric.z80

    - match: '(?i)\b(RST)\s+({{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80

    # Push and pop instructions

    - match: '(?i)\b(PUSH|POP)\s+({{regs16}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80

    # Comparison instruction

    - match: '(?i)(CP|CPL|CPI|CPD|CPIR|CPDR)'
      scope: keyword.control.z80

    - match: '(?i)\b(CP)\s+({{regs8}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80

    - match: '(?i)\b(CP)\s+({{reg_ptr_hl}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80

    - match: '(?i)\b(CP)\s+({{number}})\b'
      captures:
        1: keyword.control.z80
        2: constant.numeric.z80
    
    - match: '(?i)\b(CP)\s+({{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80

    # ************************************
    # *** Adding instructions (8 bits) ***
    # ************************************

    - match: '(?i)\b(ADD|ADC)\s+({{regs8}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80

    - match: '(?i)\b(ADD|ADC)\s+({{reg_ptr_hl}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.parameter.z80

    - match: '(?i)\b(ADD|ADC)\s+({{number}})\b'
      captures:
        1: keyword.control.z80
        2: constant.numeric.z80

    - match: '(?i)\b(ADD|ADC)\s+({{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.function.z80

    - match: '(?i)\b(ADD|ADC)\s+(A){{comma}}({{regs8}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.other.z80

    - match: '(?i)\b(ADD|ADC)\s+(A){{comma}}({{reg_ptr_hl}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.parameter.z80

    - match: '(?i)\b(ADD|ADC)\s+(A){{comma}}({{number}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: constant.numeric.z80

    - match: '(?i)\b(ADD|ADC)\s+(A){{comma}}({{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.function.z80

    #
    # Substracting instructions (8 bits)

    - match: '(?i)\b(SUB|SBC)\s+({{regs8}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80

    - match: '(?i)\b(SUB|SBC)\s+({{reg_ptr_hl}})\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80

    - match: '(?i)\b(SUB|SBC)\s+({{number}})\b'
      captures:
        1: keyword.control.z80
        2: constant.numeric.z80

    - match: '(?i)\b(SUB|SBC)\s+({{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.function.z80

    - match: '(?i)\b(SUB|SBC)\s+(A){{comma}}({{regs8}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.other.z80

    - match: '(?i)\b(SUB|SBC)\s+(A){{comma}}({{reg_ptr_hl}})\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80

    - match: '(?i)\b(SUB|SBC)\s+(A){{comma}}({{number}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: constant.numeric.z80

    - match: '(?i)\b(SUB|SBC)\s+(A){{comma}}({{label}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.function.z80

    # ********************************
    # *** ALU operations (16 bits) ***
    # ********************************

    - match: '(?i)\b(ADD|ADC)\s+({{regs16}}){{comma}}({{regs16}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.other.z80

    - match: '(?i)\b(SUB|SBC)\s+({{regs16}}){{comma}}({{regs16}})\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80
        3: variable.other.z80

    - match: '(?i)\b(MLT)\s+(?:(BC|DE|HL))\b'
      captures:
        1: keyword.control.z80
        2: variable.other.z80

    # Legacy Code

    - match: '(?i)\b(BIT|CCF|CPL|CPD|CPDR|CPI|CPIR|DAA|DEC|DI|DJNZ|EI|EX|EXX|HALT|SLP|IM|IN|INC|IND|INDR|INF|INI|INIR|IN0|NEG|NOP|EXX|OR|OTDR|OTIR|OUT|OUTD|OUTI|OUT0|POP|PUSH|RES|RETI|RETN|RL|RLA|RLC|RLCA|RLD|RR|RRA|RRC|RRCA|RRD|SBC|SCF|SET|SLA|SLI|SLL|SRA|SRL|SUB)\b'
      scope: keyword.control.z80

    - match: '(?i)\b(LD|LDD|LDDR|LDI|LDIR)\b'
      scope: keyword.control.z80

  # **************************
  # *** Logical operations ***
  # **************************

  operators:
    
    - match: '(?i)\b(AND|DEFINED|EQ|GE|GT|HIGH|LE|LOW|LT|MOD|NE|NOT|NUL|OR|TST|SHL|SHR|XOR)\b'
      scope: keyword.control.z80
    
    - match: '\s(!=|##|&&|<<|<=|>>|>=|\|\||[&$%*+/=?~><|!-])\s'
      scope: keyword.control.z80

  identifiers:
    
    - match: '(?i)\b\s*(MACRO)\s+({{label}}(,{{label}})*)\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80
    
    - match: '(?i)\b\s*(DEFL)\s+({{label}}|{{number}}|({{label}}\s+({{number}}|{{label}})))\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80

    - match: '(?i)\b#?(DEFINE)\s+({{label}}|{{number}})\b'
      captures:
        1: keyword.control.z80
        2: variable.parameter.Z80

    - match: '(?i)(^|\s+)(DEFGROUP|IRP|REPT|ENDR|EXITM|ENDM|MEND|ENDIF)'
      scope: keyword.control.z80

  # *******************************
  # *** Preprocessor operations ***
  # *******************************

  directives:
    
    - match: '(?i)(^|\s+)(INCBIN|INCLUDE|ALIGN)\s'
      scope: keyword.control.import.z80
    
    - match: '(?i)(^|\s+)(PUBLIC|LOCAL|EXTERN|SECTION|ORG|RUN|END|BUILDROM|BUILDCPR|BUILDSNA|BANKROM|BANKSET|BANK|SAVE)\s?'
      scope: keyword.control.z80
    
    - match: '(?i)(^|\s+)(PROC|ENDP)\s'
      scope: keyword.control.z80
    
    - match: '(?i)(^|\s+)\.(ERROR|SHIFT|WARNING)\s'
      scope: keyword.control.z80
    
    - match: '(?i)(^|\s+)(.org|.area|.globl)'
      scope: keyword.control.z80
    
    - match: '(?i)^\s*(IFNDEF|IFDEF|IF) +({{label}})\s+({{comment}})?$'
      captures:
        1: keyword.control.z80
        2: variable.parameter.z80
        3: comment.line.z80
    
    - match: '(?i)(^|\s+)(ELSE|ENDIF)\s'
      scope: keyword.control.z80
    
    - match: '(?i)^(.+?)\s+(EQU)\s+(.+?)(\s+{{comment}})?$'
      captures:
        1: variable.parameter.z80
        2: keyword.control.z80
        3: constant.numeric.z80
        4: comment.line.z80

  directives_data:
    
    - match: '(?i)\b\s*(DEF[BWPS]|DB|DW|DP|DS)\s+({{label}}(,{{label}})*)\b'
      captures:
        1: storage.type.z80
        2: variable.parameter.z80
    
    - match: '(?i)\b(?:DEF[BWPS]|DB|DW|DP|DS)\b'
      scope: storage.type.z80

  addresses:
    
    - match: '{{address}}'
      scope: constant.other.address.z80

  numbers:
    
    - match: '{{binary}}'
      scope: constant.other.binary.z80
    
    - match: '{{octal}}'
      scope: constant.numeric.octal.z80
    
    - match: '{{hexidecimal}}'
      scope: constant.numeric.hex.z80
    
    - match: '{{decimal}}'
      scope: constant.numeric.integer.z80

  strings:
    
    - match: '"'
      comment: 'Strings begin/end with double quotes'
      scope: punctuation.definition.string.begin.z80
      push: inside_string
  
  inside_string:
    
    - meta_include_prototype: false
    
    - meta_scope: string.quoted.double.z80
    
    - match: '\\.'
      scope: constant.character.escape.z80
    
    - match: '"'
      scope: punctuation.definition.string.end.z80
      pop: true

  labels:
    
    - match: '^({{label}}):?'
      comment: 'Label definition'
      captures:
        1: entity.name.function.z80
    
    - match: '^ +({{label}}):'
      comment: 'Indented label definition'
      captures:
        1: entity.name.function.z80
    
    - match: '\({{label_multi}}\)'
      comment: 'Address of label'
      scope: variable.parameter.z80
    
    - match: ', ?({{label_multi}})\b'
      comment: 'Labels used in instructions'
      captures:
        1: variable.function.z80

  comments:
    
    - match: ';'
      comment: 'Comments begin with a ";" and finish at EOL'
      scope: punctuation.definition.comment.z80
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.z80
        - match: $\n?
          pop: true
    
    - match: '//'
      comment: 'Comments can also begin with a "//", and finish at EOL'
      scope: punctuation.definition.comment.z80
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.z80
        - match: $\n?
          pop: true
